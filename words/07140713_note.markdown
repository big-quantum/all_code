create_on : 20240714
note_about : dp on 07140/0713

涉及线性dp，背包问题，区间dp

# *dp：先状态，后方程，再边界*

## 线性dp

定义dp[i]为到第i位为某种最优状态，可以增加维度来详细描述当前状态，一般只与上一项有关系的维度可以用滚动数组优化空间，不要忘了初始化和边界条件

## 背包问题

* ### 1：0-1背包
一种物品选或不选
$dp[i][j]$表示前i种物品在花费j空间的情况下有的最大价值
通常$dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i]] + v[i])$
且$i$可以被滚动数组优化，循环范围由正改负

* ### 2：无穷背包
一种物品有无限多个
$dp[i][j]$定义同上
通常$dp[i][j] = max(dp[i][j], dp[i][j - w[i]] + v[i])$(由自己转移到自己)
对于滚动数组优化过后的0-1背包，将循环改回正即可

* ### 3：完全背包
一种物品有有限个
对每一种物品进行枚举个数，当成0-1背包即可

* ### 4：混合背包
分类讨论
对于无穷背包，写一个分支
对于0-1背包和完全背包，归纳到一个完全背包的分支即可

* ### 5：二维费用背包
对应0-1背包
增加一维描述第二种费用即可

* ### 6：分组背包
某些物品属于某一组，一组中只能选一件
对应0-1背包
对每一组做0-1背包即可

* ### 7：优化
二进制分组优化
单调队列优化
//待更新

## 区间dp
通常$dp[i][j]$指的是对于区间$[i,j]$中的最优答案/状态
转移时通常枚举区间中的每一个节点，寻找最优解
$dp[i][j] = min(dp[i][j], dp[i][k] + dp[k/k + 1][j] + cost)$
